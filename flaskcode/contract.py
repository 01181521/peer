import os
import pickle
import json
from web3 import Web3
import time


f1 = open(r"./database.txt","r")
file1 = f1.read()



abi = json.loads('''[
	{
		"constant": true,
		"inputs": [],
		"name": "get",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "getElement",
		"outputs": [
			{
				"internalType": "bytes1",
				"name": "",
				"type": "bytes1"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getString",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getindex",
		"outputs": [
			{
				"internalType": "uint256[]",
				"name": "",
				"type": "uint256[]"
			},
			{
				"internalType": "uint256[]",
				"name": "",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "getint",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "bytes",
				"name": "value",
				"type": "bytes"
			}
		],
		"name": "push",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "bytes",
				"name": "value",
				"type": "bytes"
			}
		],
		"name": "search",
		"outputs": [
			{
				"internalType": "uint256[]",
				"name": "",
				"type": "uint256[]"
			},
			{
				"internalType": "uint256[]",
				"name": "",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "bytes",
				"name": "value",
				"type": "bytes"
			},
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "topk",
		"outputs": [
			{
				"internalType": "uint256[]",
				"name": "",
				"type": "uint256[]"
			},
			{
				"internalType": "uint256[]",
				"name": "",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	}
]''')

def deploy(web3):
	# ganache_url = "http://127.0.0.1:8545"
	# web3 = Web3(Web3.HTTPProvider(ganache_url, request_kwargs={'timeout': 10000000}))
	
	# web3 = Web3(Web3.IPCProvider())
	print(web3.isConnected())

	bytecode = ""
	
	
	web3.eth.defaultAccount = web3.eth.accounts[9]

	# Instantiate and deploy contract
	Greeter = web3.eth.contract(abi=abi, bytecode=bytecode)

	# Submit the transaction that deploys the contract
	tx_hash = Greeter.constructor().transact()

	# Wait for the transaction to be mined, and get the transaction receipt
	tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)

	# Create the contract instance with the newly-deployed address
	# global contract
	contract = web3.eth.contract(
		address=tx_receipt.contractAddress,
		abi=abi,
	)
	print(tx_receipt.contractAddress)
	return web3,tx_receipt.contractAddress

def storage(web3,ad):
	
	time_start = time.time()  
	
	c = web3.eth.contract(address=ad,abi=abi)
	tx_hash = c.functions.push(file1).transact()

	# # Wait for transaction to be mined...
	web3.eth.waitForTransactionReceipt(tx_hash)

	time_upload = time.time()  
	time_sum = time_upload - time_start  
	print('data upload time : ', time_sum )
	

se = '0x4717'


def search(web3, ad, query=''):
	if query != '':
		file21 =query
	else:
		file21=se
	
	contract = web3.eth.contract(address=ad,abi=abi)
	time_start = time.time()
	
	tx_hash = contract.functions.search(file21).transact()
	
	list1,list2 = contract.functions.getindex().call()
	
	# print(list1)
	# print(list2)
	
	for i in list1:
		print(file3[4*i+2:4*i+6])
	#print("0000000000000000000")
	for i in list2:
		print(file3[4*i+2:4*i+6])

	time_end = time.time()  
	time_sum = time_end - time_start  
	print('seatch time : ',time_sum)
	


def searchTopk(web3, ad,topk, query=''):
	if query != '':
		file21 =query
	else:
		file21=se
	time_start = time.time()

	contract = web3.eth.contract(address=ad,abi=abi)

	#print('numnumnum',contract.functions.get().call())
	
	tx_hash = contract.functions.topk(file21,topk).transact()
	
	list1,list2 = contract.functions.getindex().call()
	

	time_end = time.time()  
	time_sum = time_end - time_start  
	print('top'+str(topk)+'-seatch time : ',time_sum)
	return time_sum,list1,list2
	



